package nl.rug.search.cpptool.api;

import com.google.common.collect.ImmutableList;
import nl.rug.search.cpptool.api.util.ContextTools;

import javax.annotation.Nonnull;
import java.util.Optional;

/**
 * This class represents the source files processed by the Clang-based CppTool.
 * If a source file is used in the compilation of its input set there will be a representative {@link SourceFile}.
 * Note that only files that were directly specified as input have declarations information, for files which were not
 * a part of the input set there will be no {@link #localContext()}.
 *
 * @author David van Leusen <J.D.van.leusen@student.rug.nl>
 * @see <a href="https://github.com/search-rug/cpptool">CppTool</a>
 * @since 2015-06-24
 */
public interface SourceFile {
    /**
     * @return The path where this source file was located when it was processed by CppTool
     */
    @Nonnull
    String path();

    /**
     * @return An iterable collection of all source files #include'd by this source file.
     */
    @Nonnull
    Iterable<SourceFile> includes();

    /**
     * @return An iterable collection of all source files that #include'd this source file.
     */
    @Nonnull
    Iterable<SourceFile> includedBy();

    /**
     * If this source file was a part of the input set generated by CppTool, then a local declaration tree can be
     * accessed through this method.
     *
     * @return A declaration tree containing all declarations defined in this source file.
     */
    @Nonnull
    Optional<DeclContext> localContext();

    /**
     * Get all declarations defined by this source file. If {@link #localContext()} is not present then this method
     * will return an empty collection.
     *
     * @return An iterable collection of all declarations defined by this source file.
     */
    @Nonnull
    default Iterable<Declaration> declarations() {
        return localContext().map(ContextTools::traverseDeclarations).orElse(ImmutableList.of());
    }
}
